# -*- coding: utf-8 -*-
"""yaya-job-matching-engine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bHWFS5apeVTur2lFF0u5QB1dr4PfnkzV

# ü§ñ Yaya Job Matching Engine (CrewAI + Ollama MVP)

This Colab notebook is a prototype for **IAIA's smart job-matching engine** designed to intelligently match **construction jobs** with the best-fit **local workers** based on:

- ‚úÖ Required skills
- ‚úÖ Tool proficiency
- ‚úÖ Relevant experience
- ‚úÖ Past reviews

---

### üß† What Powers This Matching?

- **[CrewAI](https://github.com/joaomdmoura/crewai)** ‚Äì Multi-agent orchestration framework
- **[Ollama](https://ollama.com)** ‚Äì Local runtime for open-source language models like `llama3`, `mistral`, etc.
- **LangChain** ‚Äì Used under the hood to bridge Ollama models with CrewAI agents

---

### üîß How It Works

This notebook runs a **simulated hiring flow** with a team of AI agents:

| Agent Role              | Function                                                                 |
|-------------------------|--------------------------------------------------------------------------|
| üßæ **Job Analyzer**       | Extracts required skills, tools, location from the job post              |
| üõ†Ô∏è **Skill Matcher**      | Compares worker skills and tools against job requirements                |
| üß™ **Experience Validator** | Evaluates relevance and recency of worker history                        |
| ‚≠ê **Review Evaluator**    | Analyzes reviews to rate worker reliability                             |
| üß† **Final Matcher**       | Aggregates all scores and ranks top 3 workers                           |

---

### üì¶ Input Data

- 1 sample job post
- 2 worker profiles (can scale up later)

---

### üöÄ Output

After running all cells, you'll get:

- Agent-by-agent reasoning
- Final top 3 worker matches with scores
- Printout of how each worker ranked and why

---

### üõ†Ô∏è Requirements

- `crewai` (agent framework)
- `ollama` (Python client for LLMs)
- Local Ollama server running (e.g. `ollama run llama3`) *(outside of Colab)*

---

üí° You can adapt this notebook to real data, add UI, or connect to APIs once the logic is validated.

üß™ CELL 1 ‚Äì Install Required Packages
"""

# üì¶ Install CrewAI and Ollama for local model usage
!pip install -q crewai ollama

"""üì¶ CELL 2 ‚Äì Sample Job & Worker Data"""

# üß± Sample job post and sample worker profiles for testing

job_post = {
    "title": "Tiler Needed for 3 Days in Kisumu",
    "skills": ["tiling", "grouting"],
    "location": "Kisumu",
    "duration": "3 days",
    "description": "Need a tiler to fix bathroom tiles in 3 apartments"
}

worker_profiles = [
    {
        "name": "John Otieno",
        "skills": ["tiling", "plastering"],
        "tools": ["trowel", "tile cutter"],
        "location": "Kisumu",
        "experience": ["tiling 2 bathrooms in March", "kitchen tiling Jan"],
        "reviews": [{"rating": 5, "comment": "Fast and clean job"}]
    },
    {
        "name": "Peter Kamau",
        "skills": ["painting", "welding"],
        "tools": ["spray gun"],
        "location": "Nairobi",
        "experience": ["wall painting", "welding"],
        "reviews": [{"rating": 4, "comment": "Good but slow"}]
    }
]

"""üß† CELL 3 ‚Äì Define the Agents"""

# üß† CrewAI Agents: Job Analyzer, Skill Matcher, Experience Validator, Review Evaluator, Final Matcher

from crewai import Agent

llm_config = {"model": "llama3"}  # Ollama model name

job_analyzer = Agent(
    role="Job Analyzer",
    goal="Understand job requirements, including key skills and location",
    backstory="You‚Äôre an expert at parsing job posts and extracting key data for matching.",
    verbose=True,
    llm_config=llm_config
)

skill_matcher = Agent(
    role="Skill Matcher",
    goal="Match job-required skills with workers' proficiencies",
    backstory="You're skilled at matching technical abilities and tools with job needs.",
    verbose=True,
    llm_config=llm_config
)

experience_validator = Agent(
    role="Experience Validator",
    goal="Evaluate how recent and relevant each worker's experience is to the job",
    backstory="You assess work history and determine best fits based on experience.",
    verbose=True,
    llm_config=llm_config
)

review_evaluator = Agent(
    role="Review Evaluator",
    goal="Score each worker‚Äôs reliability and trustworthiness from reviews",
    backstory="You read between the lines in ratings and testimonials to spot dependable workers.",
    verbose=True,
    llm_config=llm_config
)

final_matcher = Agent(
    role="Final Matcher",
    goal="Aggregate all inputs and rank top 3 worker matches",
    backstory="You make final hiring decisions based on everyone‚Äôs evaluations.",
    verbose=True,
    llm_config=llm_config
)

"""üìã CELL 4 ‚Äì Define the Tasks"""

# üß© Define CrewAI Tasks for each Agent based on job + worker data

from crewai import Task

def build_tasks(job, workers, agents):
    return [
        Task(
            description=f"Analyze the following job and extract required skills, tools, and location:\n\n{job}",
            expected_output="List of required skills, location, and job duration.",
            agent=agents['job_analyzer']
        ),
        Task(
            description=f"Compare job needs to the following workers:\n\n{workers}\n\nMatch based on skills/tools.",
            expected_output="Skill match score for each worker (0-10) with reasoning.",
            agent=agents['skill_matcher']
        ),
        Task(
            description=f"Evaluate workers' experience relevance for this job:\n\nJob: {job['description']}\nWorkers: {workers}",
            expected_output="Experience match score (0-10) for each worker with explanation.",
            agent=agents['experience_validator']
        ),
        Task(
            description=f"Assess the following worker reviews for reliability:\n\n{workers}",
            expected_output="Trust score (0-5) for each worker with comments.",
            agent=agents['review_evaluator']
        ),
        Task(
            description="Aggregate all agent insights and return the top 3 matching workers with ranking and reason.",
            expected_output="Top 3 worker names, ranked with final scores and justification.",
            agent=agents['final_matcher']
        )
    ]

"""üöÄ CELL 5 ‚Äì Run the Crew Matching Engine"""

# üöÄ Run the CrewAI Matching Engine with Cleaned Inputs (Final Version)

from crewai import Crew, Process, Task

# ‚úÖ Clean formatting for job post (avoid raw JSON/escape issues)
job_str = f"""
Title: {job_post['title']}
Location: {job_post['location']}
Duration: {job_post['duration']}
Skills Required: {', '.join(job_post['skills'])}
Description: {job_post['description']}
"""

# ‚úÖ Clean formatting for worker profiles
workers_str = ""
for worker in worker_profiles:
    reviews = ' | '.join([f"{r['rating']}‚≠ê - {r['comment']}" for r in worker['reviews']])
    workers_str += f"""
Name: {worker['name']}
Location: {worker['location']}
Skills: {', '.join(worker['skills'])}
Tools: {', '.join(worker['tools'])}
Experience: {', '.join(worker['experience'])}
Reviews: {reviews}
---
"""

# ‚úÖ Define agents in a dictionary
agents = {
    'job_analyzer': job_analyzer,
    'skill_matcher': skill_matcher,
    'experience_validator': experience_validator,
    'review_evaluator': review_evaluator,
    'final_matcher': final_matcher
}

# ‚úÖ Build CrewAI tasks using clean job and worker strings
def build_tasks_clean(job_text, workers_text, agents):
    return [
        Task(
            description=f"Analyze this job post and extract key skills, tools, and location:\n{job_text}",
            expected_output="List of required skills, tools, location, and job duration.",
            agent=agents['job_analyzer']
        ),
        Task(
            description=f"Compare the job requirements with the following workers and score each based on skill + tool fit:\n{workers_text}",
            expected_output="Skill match score (0‚Äì10) for each worker with short explanation.",
            agent=agents['skill_matcher']
        ),
        Task(
            description=f"Rate each worker's past experience for how well it fits this job:\nJob Description: {job_post['description']}\nWorkers:\n{workers_text}",
            expected_output="Experience match score (0‚Äì10) for each worker and why.",
            agent=agents['experience_validator']
        ),
        Task(
            description=f"Evaluate worker reviews and give a trust score from 0 to 5:\n{workers_text}",
            expected_output="Trust score (0‚Äì5) with brief comments per worker.",
            agent=agents['review_evaluator']
        ),
        Task(
            description="Using all previous evaluations, rank the top 3 best-matching workers. Justify the ranking.",
            expected_output="Top 3 workers, ranked with final scores and reasons.",
            agent=agents['final_matcher']
        )
    ]

# ‚úÖ Build the tasks
tasks = build_tasks_clean(job_str, workers_str, agents)

# ‚úÖ Create the Crew
crew = Crew(
    agents=list(agents.values()),
    tasks=tasks,
    process=Process.sequential,
    verbose=True
)

# ‚úÖ Run the Crew and print the result
result = crew.kickoff()

print("\nüü¢ FINAL MATCH RESULT:\n")
print(result)

